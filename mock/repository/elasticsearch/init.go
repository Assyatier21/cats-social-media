// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/elasticsearch/init.go

// Package mock_elasticsearch is a generated GoMock package.
package mock_elasticsearch

import (
	context "context"
	reflect "reflect"

	entity "github.com/backendmagang/project-1/models/entity"
	gomock "github.com/golang/mock/gomock"
	elastic "github.com/olivere/elastic/v7"
)

// MockElasticHandler is a mock of ElasticHandler interface.
type MockElasticHandler struct {
	ctrl     *gomock.Controller
	recorder *MockElasticHandlerMockRecorder
}

// MockElasticHandlerMockRecorder is the mock recorder for MockElasticHandler.
type MockElasticHandlerMockRecorder struct {
	mock *MockElasticHandler
}

// NewMockElasticHandler creates a new mock instance.
func NewMockElasticHandler(ctrl *gomock.Controller) *MockElasticHandler {
	mock := &MockElasticHandler{ctrl: ctrl}
	mock.recorder = &MockElasticHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticHandler) EXPECT() *MockElasticHandlerMockRecorder {
	return m.recorder
}

// DeleteArticle mocks base method.
func (m *MockElasticHandler) DeleteArticle(ctx context.Context, req entity.DeleteArticleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockElasticHandlerMockRecorder) DeleteArticle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockElasticHandler)(nil).DeleteArticle), ctx, req)
}

// DeleteCategory mocks base method.
func (m *MockElasticHandler) DeleteCategory(ctx context.Context, req entity.DeleteCategoryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockElasticHandlerMockRecorder) DeleteCategory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockElasticHandler)(nil).DeleteCategory), ctx, req)
}

// GetArticleDetails mocks base method.
func (m *MockElasticHandler) GetArticleDetails(ctx context.Context, query elastic.Query) (entity.ArticleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDetails", ctx, query)
	ret0, _ := ret[0].(entity.ArticleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleDetails indicates an expected call of GetArticleDetails.
func (mr *MockElasticHandlerMockRecorder) GetArticleDetails(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDetails", reflect.TypeOf((*MockElasticHandler)(nil).GetArticleDetails), ctx, query)
}

// GetArticles mocks base method.
func (m *MockElasticHandler) GetArticles(ctx context.Context, req entity.GetArticlesRequest) ([]entity.ArticleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx, req)
	ret0, _ := ret[0].([]entity.ArticleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockElasticHandlerMockRecorder) GetArticles(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockElasticHandler)(nil).GetArticles), ctx, req)
}

// GetCategoryDetails mocks base method.
func (m *MockElasticHandler) GetCategoryDetails(ctx context.Context, query elastic.Query) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryDetails", ctx, query)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryDetails indicates an expected call of GetCategoryDetails.
func (mr *MockElasticHandlerMockRecorder) GetCategoryDetails(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryDetails", reflect.TypeOf((*MockElasticHandler)(nil).GetCategoryDetails), ctx, query)
}

// GetCategoryTree mocks base method.
func (m *MockElasticHandler) GetCategoryTree(ctx context.Context, req entity.GetCategoriesRequest) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTree", ctx, req)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTree indicates an expected call of GetCategoryTree.
func (mr *MockElasticHandlerMockRecorder) GetCategoryTree(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTree", reflect.TypeOf((*MockElasticHandler)(nil).GetCategoryTree), ctx, req)
}

// InsertArticle mocks base method.
func (m *MockElasticHandler) InsertArticle(ctx context.Context, article entity.ArticleResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArticle", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertArticle indicates an expected call of InsertArticle.
func (mr *MockElasticHandlerMockRecorder) InsertArticle(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArticle", reflect.TypeOf((*MockElasticHandler)(nil).InsertArticle), ctx, article)
}

// InsertCategory mocks base method.
func (m *MockElasticHandler) InsertCategory(ctx context.Context, category entity.InsertCategoryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCategory", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCategory indicates an expected call of InsertCategory.
func (mr *MockElasticHandlerMockRecorder) InsertCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCategory", reflect.TypeOf((*MockElasticHandler)(nil).InsertCategory), ctx, category)
}

// UpdateArticle mocks base method.
func (m *MockElasticHandler) UpdateArticle(ctx context.Context, article entity.ArticleResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockElasticHandlerMockRecorder) UpdateArticle(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockElasticHandler)(nil).UpdateArticle), ctx, article)
}

// UpdateCategory mocks base method.
func (m *MockElasticHandler) UpdateCategory(ctx context.Context, category entity.UpdateCategoryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockElasticHandlerMockRecorder) UpdateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockElasticHandler)(nil).UpdateCategory), ctx, category)
}
